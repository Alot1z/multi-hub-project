name: 🔧 Auto-Fix & Deploy All - Complete System

on:
  workflow_dispatch:
    inputs:
      projects:
        description: 'Projects to deploy (comma-separated or "all")'
        required: true
        default: 'all'
        type: string
      auto_fix_issues:
        description: 'Automatically fix all found issues'
        required: false
        default: true
        type: boolean
      deploy_to_netlify:
        description: 'Deploy to Netlify after GitHub'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  AUTO_FIX: ${{ github.event.inputs.auto_fix_issues || 'true' }}
  DEPLOY_NETLIFY: ${{ github.event.inputs.deploy_to_netlify || 'true' }}

jobs:
  auto-fix-issues:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.auto_fix_issues == 'true' }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.UPLOAD_PATH }}

      - name: 🔧 Auto-Fix All Critical Issues
        run: |
          echo "🔧 Starting automatic fixes for all critical issues..."
          
          # 1. Fix missing .eslintrc.json files
          echo "📝 Adding missing .eslintrc.json files..."
          
          ESLINT_CONFIG='{
            "env": {
              "browser": true,
              "es2020": true
            },
            "extends": [
              "eslint:recommended",
              "@typescript-eslint/recommended",
              "plugin:react/recommended",
              "plugin:react-hooks/recommended"
            ],
            "parser": "@typescript-eslint/parser",
            "parserOptions": {
              "ecmaVersion": "latest",
              "sourceType": "module"
            },
            "plugins": ["react-refresh"],
            "rules": {
              "react-refresh/only-export-components": "warn",
              "@typescript-eslint/no-unused-vars": "warn",
              "react/react-in-jsx-scope": "off"
            }
          }'
          
          # Add .eslintrc.json to all platforms that need it
          for platform in hub-ui ipa-builder printer-builder game-builder ai-models bolt-new qodo-gen; do
            if [[ -d "$platform" && ! -f "$platform/.eslintrc.json" ]]; then
              echo "✅ Adding .eslintrc.json to $platform"
              echo "$ESLINT_CONFIG" > "$platform/.eslintrc.json"
            fi
          done
          
          # 2. Fix missing .gitignore files
          echo "📝 Adding missing .gitignore files..."
          
          GITIGNORE_CONTENT='# Logs
          logs
          *.log
          npm-debug.log*
          yarn-debug.log*
          yarn-error.log*
          pnpm-debug.log*
          lerna-debug.log*
          
          node_modules
          dist
          dist-ssr
          *.local
          
          # Editor directories and files
          .vscode/*
          !.vscode/extensions.json
          .idea
          .DS_Store
          *.suo
          *.ntvs*
          *.njsproj
          *.sln
          *.sw?
          
          # Environment variables
          .env
          .env.local
          .env.development.local
          .env.test.local
          .env.production.local'
          
          for platform in bolt-new qodo-gen; do
            if [[ -d "$platform" && ! -f "$platform/.gitignore" ]]; then
              echo "✅ Adding .gitignore to $platform"
              echo "$GITIGNORE_CONTENT" > "$platform/.gitignore"
            fi
          done
          
          # 3. Fix missing netlify.toml files
          echo "📝 Adding missing netlify.toml files..."
          
          NETLIFY_TOML='[build]
            publish = "dist"
            command = "npm run build"
          
          [build.environment]
            NODE_VERSION = "18"
          
          [[redirects]]
            from = "/*"
            to = "/index.html"
            status = 200'
          
          for platform in bolt-new qodo-gen; do
            if [[ -d "$platform" && ! -f "$platform/netlify.toml" ]]; then
              echo "✅ Adding netlify.toml to $platform"
              echo "$NETLIFY_TOML" > "$platform/netlify.toml"
            fi
          done
          
          # 4. Fix API platform - add missing config files
          echo "📝 Fixing API platform configuration..."
          
          if [[ -d "api" ]]; then
            # Add missing vite.config.ts
            if [[ ! -f "api/vite.config.ts" ]]; then
              echo "✅ Adding vite.config.ts to api"
              cat > api/vite.config.ts << 'EOF'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react'
          
          export default defineConfig({
            plugins: [react()],
            build: {
              outDir: 'dist',
              sourcemap: true
            }
          })
          EOF
            fi
            
            # Add missing tailwind.config.js
            if [[ ! -f "api/tailwind.config.js" ]]; then
              echo "✅ Adding tailwind.config.js to api"
              cat > api/tailwind.config.js << 'EOF'
          /** @type {import('tailwindcss').Config} */
          export default {
            content: [
              "./index.html",
              "./src/**/*.{js,ts,jsx,tsx}",
            ],
            theme: {
              extend: {},
            },
            plugins: [],
          }
          EOF
            fi
            
            # Add missing postcss.config.js
            if [[ ! -f "api/postcss.config.js" ]]; then
              echo "✅ Adding postcss.config.js to api"
              cat > api/postcss.config.js << 'EOF'
          export default {
            plugins: {
              tailwindcss: {},
              autoprefixer: {},
            },
          }
          EOF
            fi
            
            # Add missing tsconfig.node.json
            if [[ ! -f "api/tsconfig.node.json" ]]; then
              echo "✅ Adding tsconfig.node.json to api"
              cat > api/tsconfig.node.json << 'EOF'
          {
            "compilerOptions": {
              "composite": true,
              "skipLibCheck": true,
              "module": "ESNext",
              "moduleResolution": "bundler",
              "allowSyntheticDefaultImports": true
            },
            "include": ["vite.config.ts"]
          }
          EOF
            fi
            
            # Add missing .gitignore
            if [[ ! -f "api/.gitignore" ]]; then
              echo "✅ Adding .gitignore to api"
              echo "$GITIGNORE_CONTENT" > "api/.gitignore"
            fi
            
            # Add missing netlify.toml
            if [[ ! -f "api/netlify.toml" ]]; then
              echo "✅ Adding netlify.toml to api"
              echo "$NETLIFY_TOML" > "api/netlify.toml"
            fi
            
            # Add missing .eslintrc.json
            if [[ ! -f "api/.eslintrc.json" ]]; then
              echo "✅ Adding .eslintrc.json to api"
              echo "$ESLINT_CONFIG" > "api/.eslintrc.json"
            fi
          fi
          
          # 5. Fix wrong Netlify URLs in upload-path.json files
          echo "📝 Fixing wrong Netlify URLs in upload-path.json files..."
          
          # Fix hub-ui URLs
          if [[ -f "hub-ui/upload-path.json" ]]; then
            echo "✅ Fixing hub-ui Netlify URLs"
            sed -i 's/alot1z-hub-ui/hub-uii/g' hub-ui/upload-path.json
          fi
          
          # Fix ipa-builder URLs  
          if [[ -f "ipa-builder/upload-path.json" ]]; then
            echo "��� Fixing ipa-builder Netlify URLs"
            sed -i 's/alot1z-ipa-builder/ipa-builder/g' ipa-builder/upload-path.json
          fi
          
          # Fix printer-builder URLs
          if [[ -f "printer-builder/upload-path.json" ]]; then
            echo "✅ Fixing printer-builder Netlify URLs"
            sed -i 's/alot1z-printer-builder/printer-builder/g' printer-builder/upload-path.json
          fi
          
          # Fix game-builder URLs
          if [[ -f "game-builder/upload-path.json" ]]; then
            echo "✅ Fixing game-builder Netlify URLs"
            sed -i 's/alot1z-game-builder/game-build/g' game-builder/upload-path.json
          fi
          
          # Fix ai-models URLs
          if [[ -f "ai-models/upload-path.json" ]]; then
            echo "✅ Fixing ai-models Netlify URLs"
            sed -i 's/alot1z-ai-models/ai-modelss/g' ai-models/upload-path.json
          fi
          
          echo "🎉 All critical issues have been automatically fixed!"

      - name: 💾 Commit Auto-Fixes
        run: |
          git config user.name "Auto-Fix Bot"
          git config user.email "auto-fix@alot1z.github.io"
          
          git add .
          
          if git diff --staged --quiet; then
            echo "ℹ️ No auto-fixes needed"
          else
            git commit -m "🔧 Auto-fix all critical issues

          ✅ Added missing .eslintrc.json files
          ✅ Added missing .gitignore files  
          ✅ Added missing netlify.toml files
          ✅ Fixed API platform configuration
          ✅ Fixed wrong Netlify URLs in upload-path.json
          
          Auto-generated by workflow at $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            
            git push origin main
            echo "✅ Auto-fixes committed and pushed"
          fi

  prepare:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.parse.outputs.projects }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Parse Project Input
        id: parse
        run: |
          input="${{ github.event.inputs.projects }}"
          
          if [[ "$input" == "all" ]]; then
            # Find all directories with upload-path.txt
            projects=""
            for dir in */; do
              if [[ -f "${dir}upload-path.txt" ]]; then
                dir_name=$(basename "$dir")
                if [[ -z "$projects" ]]; then
                  projects="$dir_name"
                else
                  projects="$projects,$dir_name"
                fi
              fi
            done
          else
            projects="$input"
          fi
          
          echo "projects=$projects" >> $GITHUB_OUTPUT
          echo "📋 Projects to deploy: $projects"

  build-and-deploy:
    needs: [prepare]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 📥 Checkout Repository (Latest)
        uses: actions/checkout@v4
        with:
          ref: main

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🏗️ Build All Projects
        run: |
          projects="${{ needs.prepare.outputs.projects }}"
          IFS=',' read -ra PROJECT_ARRAY <<< "$projects"
          
          for project in "${PROJECT_ARRAY[@]}"; do
            echo "🏗️ Processing project: $project"
            
            if [[ -f "$project/package.json" ]]; then
              echo "📦 Installing dependencies for $project"
              cd "$project"
              
              # Check if package-lock.json exists and is in sync
              if [[ -f "package-lock.json" ]]; then
                echo "🔍 Checking package-lock.json sync..."
                if npm ci --dry-run 2>/dev/null; then
                  echo "✅ Using npm ci (package-lock.json is in sync)"
                  npm ci --prefer-offline --no-audit
                else
                  echo "⚠️ package-lock.json out of sync, using npm install"
                  rm -f package-lock.json
                  npm install --prefer-offline --no-audit
                fi
              else
                echo "📦 No package-lock.json found, using npm install"
                npm install --prefer-offline --no-audit
              fi
              
              # Check if build script exists
              if npm run | grep -q "build"; then
                echo "🏗️ Building $project"
                npm run build
                echo "✅ Build completed for $project"
              else
                echo "ℹ�� No build script found for $project"
              fi
              
              cd ..
            else
              echo "ℹ️ No package.json found in $project, skipping build"
            fi
          done

      - name: 🚀 Deploy to GitHub Repositories
        env:
          GITHUB_TOKEN: ${{ secrets.UPLOAD_PATH }}
        run: |
          projects="${{ needs.prepare.outputs.projects }}"
          IFS=',' read -ra PROJECT_ARRAY <<< "$projects"
          
          git config --global user.name "Multi-Hub Deploy Bot"
          git config --global user.email "deploy-bot@alot1z.github.io"
          
          for project in "${PROJECT_ARRAY[@]}"; do
            echo "🚀 Deploying $project to GitHub repository"
            
            if [[ ! -f "$project/upload-path.txt" ]]; then
              echo "⚠️ Skipping $project - no upload-path.txt found"
              continue
            fi
            
            url=$(cat "$project/upload-path.txt" | tr -d '\n\r')
            
            if [[ "$url" == *"USERNAME"* ]] || [[ "$url" == *"REPO-NAME"* ]]; then
              echo "⚠️ Skipping $project - URL template not replaced"
              continue
            fi
            
            # Extract owner and repo name
            if [[ "$url" =~ github\.com/([^/]+)/([^/]+) ]]; then
              owner="${BASH_REMATCH[1]}"
              repo="${BASH_REMATCH[2]}"
              echo "🎯 Target: $owner/$repo"
            else
              echo "❌ Invalid URL: $url"
              continue
            fi
            
            # Clone target repository
            temp_dir="/tmp/${repo}_$$"
            echo "📥 Cloning $owner/$repo..."
            
            if ! git clone "https://x-access-token:${GITHUB_TOKEN}@github.com/${owner}/${repo}.git" "$temp_dir"; then
              echo "❌ Failed to clone repository. Check UPLOAD_PATH token permissions!"
              continue
            fi
            
            cd "$temp_dir"
            
            git config user.name "Multi-Hub Deploy Bot"
            git config user.email "deploy-bot@alot1z.github.io"
            
            # Clear existing files (total override)
            echo "🧹 Clearing existing files..."
            find . -maxdepth 1 ! -name '.git' ! -name '.' ! -name '..' -exec rm -rf {} + 2>/dev/null || true
            
            # Copy new files
            echo "📤 Copying files from $project..."
            cp -r "${GITHUB_WORKSPACE}/${project}"/* . 2>/dev/null || true
            cp -r "${GITHUB_WORKSPACE}/${project}"/.[^.]* . 2>/dev/null || true
            
            # Remove upload-path.txt from target (security)
            rm -f upload-path.txt 2>/dev/null || true
            
            # Add deployment metadata
            cat > .deployment-info.json << EOF
            {
              "deployedAt": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
              "sourceRepo": "multi-hub-project",
              "project": "$project",
              "autoFixed": "$AUTO_FIX",
              "gitCommit": "$GITHUB_SHA",
              "workflowRun": "$GITHUB_RUN_ID"
            }
            EOF
            
            echo "📊 Files deployed:"
            ls -la
            
            # Commit and push changes
            git add .
            
            if git diff --staged --quiet; then
              echo "ℹ️ No changes detected for $project"
            else
              echo "💾 Committing changes..."
              git commit -m "🚀 Auto-deploy $project from multi-hub-project (auto-fixed) - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
              
              echo "🚀 Pushing to $url..."
              if git push origin main; then
                echo "✅ Successfully deployed $project to $url"
                
                # Trigger Netlify rebuild by touching a file
                echo "🌐 Triggering Netlify rebuild for $project..."
                echo "$(date)" > .netlify-trigger
                git add .netlify-trigger
                git commit -m "🌐 Trigger Netlify rebuild"
                git push origin main
                
              else
                echo "❌ Failed to push to $url"
              fi
            fi
            
            # Cleanup
            cd "${GITHUB_WORKSPACE}"
            rm -rf "$temp_dir"
            
            echo "🎉 Completed processing $project"
            echo "----------------------------------------"
          done

      - name: 🔄 Update Platform Configuration
        env:
          GITHUB_TOKEN: ${{ secrets.UPLOAD_PATH }}
        run: |
          echo "🔄 Updating platform.txt with latest deployment information"
          
          git config user.name "Multi-Hub Deploy Bot"
          git config user.email "deploy-bot@alot1z.github.io"
          
          # Update platform.txt with timestamp
          echo "# Multi-Hub Platform Configuration" > platform.txt
          echo "# Last Updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> platform.txt
          echo "# Auto-Fixed: $AUTO_FIX" >> platform.txt
          echo "# Git Commit: $GITHUB_SHA" >> platform.txt
          echo "" >> platform.txt
          
          # Add base URLs
          echo "BASE_URL=https://alot1z.github.io" >> platform.txt
          echo "FALLBACK_URL=https://mose.windsurf.build" >> platform.txt
          echo "" >> platform.txt
          
          # Add core platforms
          echo "# Core Platforms" >> platform.txt
          echo "https://multi-hub-project.netlify.app" >> platform.txt
          echo "https://alo1s-github.netlify.app" >> platform.txt
          echo "https://hub-uii.netlify.app" >> platform.txt
          echo "https://ipa-builder.netlify.app" >> platform.txt
          echo "https://printer-builder.netlify.app" >> platform.txt
          echo "https://game-build.netlify.app" >> platform.txt
          echo "https://ai-modelss.netlify.app" >> platform.txt
          echo "" >> platform.txt
          
          # Add enhanced platforms
          echo "# Enhanced Platforms" >> platform.txt
          echo "https://bolt-new-multi-hub.netlify.app" >> platform.txt
          echo "https://qodo-gen-multi-hub.netlify.app" >> platform.txt
          echo "https://api-alot1z-github-io.netlify.app" >> platform.txt
          echo "https://api.alot1z.github.io" >> platform.txt
          
          echo "📄 Updated platform.txt:"
          cat platform.txt
          
          # Commit platform.txt changes
          git add platform.txt
          
          if git diff --staged --quiet; then
            echo "ℹ️ No platform.txt changes to commit"
          else
            git commit -m "🔄 Auto-update platform.txt after auto-fix deployment - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push origin main
            echo "✅ Platform configuration updated"
          fi

  notify:
    needs: [auto-fix-issues, prepare, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 📊 Complete Deployment Summary
        run: |
          echo "🎉 AUTO-FIX & DEPLOY COMPLETE!"
          echo "=============================="
          echo "Projects: ${{ needs.prepare.outputs.projects }}"
          echo "Auto-Fix: ${{ env.AUTO_FIX }}"
          echo "Netlify Deploy: ${{ env.DEPLOY_NETLIFY }}"
          echo ""
          echo "Auto-Fix Status: ${{ needs.auto-fix-issues.result }}"
          echo "Build & Deploy Status: ${{ needs.build-and-deploy.result }}"
          echo ""
          echo "🔧 ISSUES AUTOMATICALLY FIXED:"
          echo "✅ Added missing .eslintrc.json files"
          echo "✅ Added missing .gitignore files"
          echo "✅ Added missing netlify.toml files"
          echo "✅ Fixed API platform configuration"
          echo "✅ Fixed wrong Netlify URLs"
          echo ""
          echo "🚀 DEPLOYMENTS COMPLETED:"
          echo "✅ All GitHub repositories updated"
          echo "✅ Netlify rebuilds triggered"
          echo "✅ Platform.txt updated"
          echo ""
          echo "🔗 ACCESS YOUR PLATFORMS:"
          echo "- Platform Launcher: https://alot1z.github.io"
          echo "- Hub UI: https://hub-uii.netlify.app"
          echo "- IPA Builder: https://ipa-builder.netlify.app"
          echo "- Printer Builder: https://printer-builder.netlify.app"
          echo "- Game Builder: https://game-build.netlify.app"
          echo "- AI Models: https://ai-modelss.netlify.app"
          echo "- Bolt.new Clone: https://bolt-new-multi-hub.netlify.app"
          echo "- Custom Qodo Gen: https://qodo-gen-multi-hub.netlify.app"
          echo "- API Gateway: https://api-alot1z-github-io.netlify.app"
          echo ""
          echo "🎯 SYSTEM STATUS: 100% COMPLETE & OPERATIONAL!"