name: 🚀 Smart Repository Upload System

on:
  workflow_dispatch:
    inputs:
      target_folders:
        description: 'Comma separated folders to upload (or "all")'
        required: true
        default: 'all'
        type: string

jobs:
  smart-upload:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout source
        uses: actions/checkout@v4
        
      - name: 🔧 Setup tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
        
      - name: 🚀 Find and upload all folders with upload-path.json
        env:
          UPLOAD_PATH_TOKEN: ${{ secrets.upload_path }}
        run: |
          echo "🔍 Scanning for upload-path.json files..."
          
          # Find all upload-path.json files
          find . -name "upload-path.json" -type f | while read config_file; do
            folder_path=$(dirname "$config_file")
            folder_name=$(basename "$folder_path")
            
            echo "📋 Processing folder: $folder_name"
            echo "📁 Path: $folder_path"
            
            # Skip if not in target list (unless "all")
            if [[ "${{ github.event.inputs.target_folders }}" != "all" ]] && [[ "${{ github.event.inputs.target_folders }}" != *"$folder_name"* ]]; then
              echo "⏭️ Skipping $folder_name (not in target list)"
              continue
            fi
            
            # Read config
            target_repo=$(jq -r '.target_repo' "$config_file")
            repo_name=$(jq -r '.repo_name' "$config_file")
            description=$(jq -r '.description' "$config_file")
            
            echo "🎯 Target repo: $target_repo"
            echo "📝 Description: $description"
            
            # Skip placeholder URLs
            if [[ "$target_repo" == "PLACEHOLDER_REPO_URL" ]]; then
              echo "⚠️ Skipping $repo_name - placeholder URL not replaced"
              echo "💡 Replace PLACEHOLDER_REPO_URL with your actual GitHub repo URL"
              continue
            fi
            
            # Extract owner/repo from GitHub URL
            if [[ "$target_repo" =~ github\.com/([^/]+)/([^/\.]+) ]]; then
              owner="${BASH_REMATCH[1]}"
              repo="${BASH_REMATCH[2]}"
              echo "👤 Owner: $owner"
              echo "📦 Repo: $repo"
            else
              echo "❌ Invalid GitHub URL format: $target_repo"
              continue
            fi
            
            # Create temporary directory for cloning
            temp_dir="/tmp/upload_${repo_name}_$$"
            mkdir -p "$temp_dir"
            
            echo "📥 Cloning target repository..."
            if ! git clone "https://x-access-token:${UPLOAD_PATH_TOKEN}@github.com/${owner}/${repo}.git" "$temp_dir"; then
              echo "❌ Failed to clone $target_repo"
              echo "🔑 Check if your upload_path token has access to this repo"
              continue
            fi
            
            cd "$temp_dir"
            
            # Configure git
            git config user.name "Auto Upload Bot"
            git config user.email "auto-upload@github.com"
            
            echo "🧹 Clearing existing files..."
            # Remove all files except .git directory
            find . -maxdepth 1 ! -name '.git' ! -name '.' ! -name '..' -exec rm -rf {} + 2>/dev/null || true
            
            echo "📤 Copying new files from $folder_path..."
            # Copy all files from source folder
            cp -r "${GITHUB_WORKSPACE}/${folder_path}"/* . 2>/dev/null || true
            cp -r "${GITHUB_WORKSPACE}/${folder_path}"/.[^.]* . 2>/dev/null || true
            
            # Remove the upload-path.json from target (we don't need it there)
            rm -f upload-path.json
            
            # Remove excluded files
            echo "🗑️ Removing excluded files..."
            rm -rf node_modules dist .DS_Store 2>/dev/null || true
            
            echo "📊 Files to be uploaded:"
            ls -la
            
            # Add all changes
            git add .
            
            # Check if there are changes
            if git diff --staged --quiet; then
              echo "ℹ️ No changes detected for $repo_name"
            else
              echo "💾 Committing changes..."
              commit_message="🚀 Auto upload from multi-hub-project

📁 Source folder: $folder_name
📝 Description: $description
🤖 Uploaded by: Smart Repository Upload System
⏰ Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
              
              git commit -m "$commit_message"
              
              echo "🚀 Pushing to $target_repo..."
              if git push origin main; then
                echo "✅ Successfully uploaded $folder_name to $target_repo"
              else
                echo "❌ Failed to push to $target_repo"
              fi
            fi
            
            # Cleanup
            cd "${GITHUB_WORKSPACE}"
            rm -rf "$temp_dir"
            
            echo "🎉 Completed processing $folder_name"
            echo "----------------------------------------"
          done
          
          echo "🏁 All uploads completed!"
